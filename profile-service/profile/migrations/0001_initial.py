# Generated by Django 5.0.8 on 2024-10-26 06:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import profile.models
import profile.validators
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonalQualityValidator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileValidator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=150, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, validators=[profile.validators.ProfileValidator.validate_name])),
                ('last_name', models.CharField(blank=True, max_length=30, validators=[profile.validators.ProfileValidator.validate_name])),
                ('tg_nick', models.CharField(blank=True, max_length=150)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, validators=[profile.validators.ProfileValidator.validate_gender])),
                ('location', models.CharField(blank=True, max_length=50, validators=[profile.validators.ProfileValidator.validate_location])),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('token', models.CharField(blank=True, max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlaceOfWorkUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.TextField(blank=True, max_length=25)),
                ('position', models.TextField(blank=True, max_length=25)),
                ('work_period', models.CharField(help_text='Формат: "дд.мм.гггг-дд.мм.гггг" или "дд.мм.гггг-Настоящее время"', max_length=50, validators=[django.core.validators.RegexValidator(message='Период работы должен быть в формате "дд.мм.гггг-дд.мм.гггг" или "дд.мм.гггг-Настоящее время".', regex='^\\d{2}\\.\\d{2}\\.\\d{4}-\\d{2}\\.\\d{2}\\.\\d{4}$|^\\d{2}\\.\\d{2}\\.\\d{4}-Настоящее время$')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_of_work', to='profile.profile')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.TextField(blank=True, max_length=150, validators=[profile.validators.PersonalQualityValidator.validate_quality])),
                ('link', models.URLField(blank=True, validators=[profile.validators.PersonalQualityValidator.validate_portfolio_link])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal_quality', to='profile.profile')),
            ],
        ),
        migrations.CreateModel(
            name='EducationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college', models.TextField(blank=True, max_length=500)),
                ('speciality', models.TextField(blank=True, max_length=500)),
                ('year_of_study', models.CharField(help_text='Формат: "дд.мм.гггг-дд.мм.гггг" или "дд.мм.гггг-Настоящее время"', max_length=50, validators=[django.core.validators.RegexValidator(message='Период учебы должен быть в формате "дд.мм.гггг-дд.мм.гггг" или "дд.мм.гггг-Настоящее время".', regex='^\\d{2}\\.\\d{2}\\.\\d{4}-\\d{2}\\.\\d{2}\\.\\d{4}$|^\\d{2}\\.\\d{2}\\.\\d{4}-Настоящее время$')])),
                ('link', models.URLField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='profile.profile')),
            ],
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(default='uploads/default.jpg', upload_to=profile.models.user_avatar_directory_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='profile.profile')),
            ],
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=100)),
                ('skill_type', models.CharField(choices=[('key', 'Ключевые'), ('technical', 'Технические')], max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='profile.profile')),
            ],
        ),
        migrations.CreateModel(
            name='UserSpecialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Специализация может содержать только кириллицу, латиницу и пробелы.', regex='^[а-яА-Яa-zA-Z\\s]+$')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specializations', to='profile.profile')),
            ],
        ),
    ]
